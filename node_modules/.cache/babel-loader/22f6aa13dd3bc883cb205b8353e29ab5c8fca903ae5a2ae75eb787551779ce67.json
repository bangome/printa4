{"ast":null,"code":"import _URLSearchParams from \"@babel/runtime-corejs3/core-js/url-search-params\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport pdfGenerator from './services/pdfGenerator';\nimport confluenceApi from './api/confluence';\n\n// 앱 렌더링\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode, {\n  children: /*#__PURE__*/_jsx(App, {})\n}), document.getElementById('root'));\n\n// 메시지 이벤트 리스너 등록\nwindow.addEventListener('message', async event => {\n  // 메시지가 generatePdf 액션인 경우\n  if (event.data && event.data.action === 'generatePdf') {\n    try {\n      // URL에서 페이지 ID 파라미터 가져오기\n      const params = new _URLSearchParams(window.location.search);\n      const pageId = params.get('pageId');\n      if (!pageId) {\n        throw new Error('페이지 ID가 제공되지 않았습니다.');\n      }\n\n      // 페이지 데이터 가져오기\n      const pageData = await confluenceApi.getPageContent(pageId);\n      const htmlContent = await confluenceApi.getPageHtmlContent(pageId);\n\n      // PDF 생성\n      await pdfGenerator.generatePdf(pageData.title, htmlContent, event.data.settings);\n\n      // 성공 메시지 전송\n      window.parent.postMessage({\n        action: 'pdfGenerated',\n        success: true\n      }, '*');\n    } catch (error) {\n      console.error('PDF 생성 오류:', error);\n\n      // 오류 메시지 전송\n      window.parent.postMessage({\n        action: 'pdfGenerated',\n        success: false,\n        error: error.message\n      }, '*');\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}