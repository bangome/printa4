{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js/instance/for-each\";\nimport _Array$from from \"@babel/runtime-corejs3/core-js/array/from\";\n/**\r\n * HTML 요소에 스타일 적용\r\n * @param {HTMLElement} element - 스타일을 적용할 HTML 요소\r\n * @param {Object} settings - 스타일 설정\r\n */\nexport const applyStyles = (element, settings) => {\n  var _context;\n  if (!element) return;\n\n  // 기본 스타일 설정\n  element.style.fontFamily = settings.fontFamily;\n  element.style.fontSize = `${settings.fontSize.body}px`;\n\n  // 제목 스타일 설정\n  const headings = element.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  _forEachInstanceProperty(headings).call(headings, heading => {\n    switch (heading.tagName.toLowerCase()) {\n      case 'h1':\n        heading.style.fontSize = `${settings.fontSize.heading1}px`;\n        break;\n      case 'h2':\n        heading.style.fontSize = `${settings.fontSize.heading2}px`;\n        break;\n      case 'h3':\n        heading.style.fontSize = `${settings.fontSize.heading2 - 2}px`;\n        break;\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        heading.style.fontSize = `${settings.fontSize.body + 2}px`;\n        break;\n    }\n    heading.style.fontFamily = settings.fontFamily;\n  });\n\n  // 이미지 너비 제한\n  const images = element.querySelectorAll('img');\n  _forEachInstanceProperty(images).call(images, img => {\n    img.style.maxWidth = '100%';\n    img.style.height = 'auto';\n  });\n\n  // 테이블 스타일 설정\n  const tables = element.querySelectorAll('table');\n  _forEachInstanceProperty(tables).call(tables, table => {\n    table.style.width = '100%';\n    table.style.borderCollapse = 'collapse';\n    table.style.marginBottom = '16px';\n    const cells = table.querySelectorAll('th, td');\n    _forEachInstanceProperty(cells).call(cells, cell => {\n      cell.style.border = '1px solid #DFE1E6';\n      cell.style.padding = '8px';\n    });\n    const headerCells = table.querySelectorAll('th');\n    _forEachInstanceProperty(headerCells).call(headerCells, cell => {\n      cell.style.backgroundColor = '#F4F5F7';\n      cell.style.fontWeight = 'bold';\n    });\n  });\n\n  // 리스트 스타일 설정\n  const lists = element.querySelectorAll('ul, ol');\n  _forEachInstanceProperty(lists).call(lists, list => {\n    list.style.paddingLeft = '24px';\n    list.style.marginBottom = '16px';\n  });\n\n  // 링크 스타일 설정\n  const links = element.querySelectorAll('a');\n  _forEachInstanceProperty(links).call(links, link => {\n    link.style.color = '#0052CC';\n    link.style.textDecoration = 'none';\n  });\n\n  // 코드 블록 스타일 설정\n  const codeBlocks = element.querySelectorAll('pre, code');\n  _forEachInstanceProperty(codeBlocks).call(codeBlocks, block => {\n    block.style.fontFamily = 'monospace';\n    block.style.backgroundColor = '#F4F5F7';\n    block.style.padding = '8px';\n    block.style.borderRadius = '3px';\n    block.style.whiteSpace = 'pre-wrap';\n    block.style.overflowX = 'auto';\n  });\n\n  // 콘텐츠 맥락 유지 스타일 설정\n  element.style.pageBreakInside = 'avoid';\n  element.style.breakInside = 'avoid';\n\n  // 여백 없는 요소 조정\n  _forEachInstanceProperty(_context = element.querySelectorAll('p')).call(_context, p => {\n    p.style.marginTop = '0';\n    p.style.marginBottom = '16px';\n  });\n  return element;\n};\n\n/**\r\n * Confluence 마크업을 A4에 최적화된 HTML로 변환\r\n * @param {string} htmlContent - Confluence HTML 콘텐츠\r\n * @returns {string} - 최적화된 HTML\r\n */\nexport const optimizeForA4 = htmlContent => {\n  var _context2, _context3, _context4, _context5, _context6, _context7;\n  // 임시 컨테이너 생성\n  const container = document.createElement('div');\n  container.innerHTML = htmlContent;\n\n  // 메타 태그, 스크립트 제거\n  _forEachInstanceProperty(_context2 = container.querySelectorAll('script, style, meta')).call(_context2, el => el.remove());\n\n  // Confluence 특정 스타일 제거\n  _forEachInstanceProperty(_context3 = container.querySelectorAll('[class^=\"confluence-\"]')).call(_context3, el => {\n    el.removeAttribute('class');\n  });\n\n  // 불필요한 속성 제거\n  _forEachInstanceProperty(_context4 = container.querySelectorAll('*')).call(_context4, el => {\n    el.removeAttribute('data-*');\n    el.removeAttribute('id');\n  });\n\n  // 페이지 나누기를 위한 클래스 적용\n  _forEachInstanceProperty(_context5 = container.querySelectorAll('h1, h2')).call(_context5, heading => {\n    heading.style.pageBreakBefore = 'always';\n    heading.style.breakBefore = 'page';\n  });\n\n  // 이미지 주변에 페이지 나누기 방지\n  _forEachInstanceProperty(_context6 = container.querySelectorAll('img')).call(_context6, img => {\n    const wrapper = document.createElement('div');\n    wrapper.style.pageBreakInside = 'avoid';\n    wrapper.style.breakInside = 'avoid';\n    img.parentNode.insertBefore(wrapper, img);\n    wrapper.appendChild(img);\n  });\n\n  // 테이블 주변에 페이지 나누기 방지\n  _forEachInstanceProperty(_context7 = container.querySelectorAll('table')).call(_context7, table => {\n    table.style.pageBreakInside = 'avoid';\n    table.style.breakInside = 'avoid';\n  });\n  return container.innerHTML;\n};\n\n/**\r\n * A4 페이지에 맞게 콘텐츠 분할\r\n * @param {HTMLElement} container - 콘텐츠 컨테이너\r\n * @param {number} pageHeight - 페이지 높이 (px)\r\n * @returns {Array<HTMLElement>} - 페이지별로 분할된 요소 배열\r\n */\nexport const splitContentIntoPages = (container, pageHeight) => {\n  var _context8;\n  const pages = [];\n  let currentPage = document.createElement('div');\n  let currentHeight = 0;\n\n  // 각 자식 요소를 순회하며 페이지 나누기\n  _forEachInstanceProperty(_context8 = _Array$from(container.childNodes)).call(_context8, node => {\n    const clone = node.cloneNode(true);\n    const tempDiv = document.createElement('div');\n    tempDiv.appendChild(clone);\n    document.body.appendChild(tempDiv);\n    const nodeHeight = tempDiv.offsetHeight;\n    document.body.removeChild(tempDiv);\n\n    // 요소가 페이지에 들어갈 수 있는지 확인\n    if (currentHeight + nodeHeight > pageHeight) {\n      // 현재 페이지가 비어있지 않으면 페이지 배열에 추가\n      if (currentPage.childNodes.length > 0) {\n        pages.push(currentPage);\n        currentPage = document.createElement('div');\n        currentHeight = 0;\n      }\n\n      // 요소가 한 페이지보다 크면 요소 분할 필요\n      if (nodeHeight > pageHeight) {\n        // 복잡한 요소 분할은 구현하지 않고, 요소를 그대로 추가\n        currentPage.appendChild(node.cloneNode(true));\n        pages.push(currentPage);\n        currentPage = document.createElement('div');\n        currentHeight = 0;\n      } else {\n        currentPage.appendChild(node.cloneNode(true));\n        currentHeight = nodeHeight;\n      }\n    } else {\n      currentPage.appendChild(node.cloneNode(true));\n      currentHeight += nodeHeight;\n    }\n  });\n\n  // 마지막 페이지 추가\n  if (currentPage.childNodes.length > 0) {\n    pages.push(currentPage);\n  }\n  return pages;\n};\n\n/**\r\n * A4 관련 유틸리티 함수\r\n */\nexport const a4Utils = {\n  // A4 크기 상수 (mm)\n  A4_WIDTH_MM: 210,\n  A4_HEIGHT_MM: 297,\n  // DPI (dots per inch)\n  DPI: 96,\n  // mm를 px로 변환 (96 DPI 기준)\n  mmToPx: mm => mm * (96 / 25.4),\n  // px를 mm로 변환\n  pxToMm: px => px * (25.4 / 96),\n  // A4 크기 (px)\n  A4_WIDTH_PX: 210 * (96 / 25.4),\n  A4_HEIGHT_PX: 297 * (96 / 25.4)\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}